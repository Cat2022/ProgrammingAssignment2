makeCacheMatrix <- function(x = matrix()) {
Inverse <- NULL
set <- function(y) {
x <<- y
Inverse <<- NULL
}
get <- function() x
SetInverse <- function(mean) m <<- mean
GetInverse <- function() m
list(set = set, get = get,
SetInverse = SetInverse,
GetInverse = GetInverse)
}
makeCacheMatrix <- function(x = matrix()) {
Inverse <- NULL
set <- function(y) {
x <<- y
Inverse <<- NULL
}
get <- function() x
SetInverse <- function(solve) Inverse <<- solve
GetInverse <- function() Inverse
list(set = set,
get = get,
SetInverse = SetInverse,
GetInverse = GetInverse)
}
cacheSolve <- function(x, ...) {
Inverse <- x$GetInverse()
if(!is.null(Inverse)) {
message("getting cached data")
return(Inverse)
}
data <- x$get()
Inverse <- solve(data, ...)
x$SetInverse(Inverse)
Inverse
}
MyMatrix <- c(1:4,2,2)
Test_1<- makeCacheMatrix(MyMatrix)
cacheSolve(Test_1)
cacheSolve <- function(x, ...) {
Inverse <- x$GetInverse()
if(!is.null(Inverse)) {
message("getting cached data")
return(Inverse)
}
data <- x$get()
Inverse <- solve()
x$SetInverse(Inverse)
Inverse
}
cacheSolve(Test_1)
cacheSolve <- function(x, ...) {
Inverse <- x$GetInverse()
if(!is.null(Inverse)) {
message("getting cached data")
return(Inverse)
}
data <- x$get()
Inverse <- solve(a)
x$SetInverse(Inverse)
Inverse
}
cacheSolve(Test_1)
cacheSolve <- function(x, ...) {
Inverse <- x$GetInverse()
if(!is.null(Inverse)) {
message("getting cached data")
return(Inverse)
}
data <- x$get()
Inverse <- solve(mat)
x$SetInverse(Inverse)
Inverse
}
cacheSolve(Test_1)
cacheSolve <- function(x, ...) {
Inverse <- x$GetInverse()
if(!is.null(Inverse)) {
message("getting cached data")
return(Inverse)
}
data <- x$get()
Inverse <- solve(x)
x$SetInverse(Inverse)
Inverse
}
cacheSolve(Test_1)
